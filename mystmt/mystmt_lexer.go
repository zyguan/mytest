// Code generated from MyStmt.g4 by ANTLR 4.7.2. DO NOT EDIT.

package mystmt

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 12, 154,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 3, 2, 6, 2, 25,
	10, 2, 13, 2, 14, 2, 26, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 33, 10, 3, 13, 3,
	14, 3, 34, 3, 3, 7, 3, 38, 10, 3, 12, 3, 14, 3, 41, 11, 3, 3, 3, 7, 3,
	44, 10, 3, 12, 3, 14, 3, 47, 11, 3, 3, 3, 5, 3, 50, 10, 3, 3, 3, 3, 3,
	5, 3, 54, 10, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 62, 10, 4, 3,
	4, 6, 4, 65, 10, 4, 13, 4, 14, 4, 66, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3,
	5, 3, 5, 7, 5, 76, 10, 5, 12, 5, 14, 5, 79, 11, 5, 3, 5, 3, 5, 3, 5, 3,
	5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 90, 10, 6, 3, 6, 7, 6, 93, 10, 6,
	12, 6, 14, 6, 96, 11, 6, 3, 6, 5, 6, 99, 10, 6, 3, 6, 3, 6, 5, 6, 103,
	10, 6, 3, 6, 3, 6, 3, 7, 3, 7, 7, 7, 109, 10, 7, 12, 7, 14, 7, 112, 11,
	7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 7, 8, 120, 10, 8, 12, 8, 14, 8,
	123, 11, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 7, 9, 133,
	10, 9, 12, 9, 14, 9, 136, 11, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10,
	3, 10, 3, 10, 7, 10, 146, 10, 10, 12, 10, 14, 10, 149, 11, 10, 3, 10, 3,
	10, 3, 11, 3, 11, 4, 66, 77, 2, 12, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13,
	8, 15, 9, 17, 10, 19, 11, 21, 12, 3, 2, 9, 5, 2, 11, 12, 15, 15, 34, 34,
	5, 2, 67, 92, 97, 97, 99, 124, 3, 2, 34, 34, 4, 2, 12, 12, 15, 15, 4, 2,
	36, 36, 94, 94, 4, 2, 41, 41, 94, 94, 4, 2, 94, 94, 98, 98, 2, 176, 2,
	3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2,
	11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2,
	2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 3, 24, 3, 2, 2, 2, 5, 28, 3, 2, 2,
	2, 7, 61, 3, 2, 2, 2, 9, 71, 3, 2, 2, 2, 11, 89, 3, 2, 2, 2, 13, 106, 3,
	2, 2, 2, 15, 113, 3, 2, 2, 2, 17, 126, 3, 2, 2, 2, 19, 139, 3, 2, 2, 2,
	21, 152, 3, 2, 2, 2, 23, 25, 9, 2, 2, 2, 24, 23, 3, 2, 2, 2, 25, 26, 3,
	2, 2, 2, 26, 24, 3, 2, 2, 2, 26, 27, 3, 2, 2, 2, 27, 4, 3, 2, 2, 2, 28,
	29, 7, 47, 2, 2, 29, 30, 7, 47, 2, 2, 30, 32, 3, 2, 2, 2, 31, 33, 9, 3,
	2, 2, 32, 31, 3, 2, 2, 2, 33, 34, 3, 2, 2, 2, 34, 32, 3, 2, 2, 2, 34, 35,
	3, 2, 2, 2, 35, 39, 3, 2, 2, 2, 36, 38, 9, 4, 2, 2, 37, 36, 3, 2, 2, 2,
	38, 41, 3, 2, 2, 2, 39, 37, 3, 2, 2, 2, 39, 40, 3, 2, 2, 2, 40, 45, 3,
	2, 2, 2, 41, 39, 3, 2, 2, 2, 42, 44, 10, 5, 2, 2, 43, 42, 3, 2, 2, 2, 44,
	47, 3, 2, 2, 2, 45, 43, 3, 2, 2, 2, 45, 46, 3, 2, 2, 2, 46, 53, 3, 2, 2,
	2, 47, 45, 3, 2, 2, 2, 48, 50, 7, 15, 2, 2, 49, 48, 3, 2, 2, 2, 49, 50,
	3, 2, 2, 2, 50, 51, 3, 2, 2, 2, 51, 54, 7, 12, 2, 2, 52, 54, 7, 2, 2, 3,
	53, 49, 3, 2, 2, 2, 53, 52, 3, 2, 2, 2, 54, 6, 3, 2, 2, 2, 55, 56, 7, 49,
	2, 2, 56, 57, 7, 44, 2, 2, 57, 62, 7, 35, 2, 2, 58, 59, 7, 49, 2, 2, 59,
	60, 7, 44, 2, 2, 60, 62, 7, 45, 2, 2, 61, 55, 3, 2, 2, 2, 61, 58, 3, 2,
	2, 2, 62, 64, 3, 2, 2, 2, 63, 65, 11, 2, 2, 2, 64, 63, 3, 2, 2, 2, 65,
	66, 3, 2, 2, 2, 66, 67, 3, 2, 2, 2, 66, 64, 3, 2, 2, 2, 67, 68, 3, 2, 2,
	2, 68, 69, 7, 44, 2, 2, 69, 70, 7, 49, 2, 2, 70, 8, 3, 2, 2, 2, 71, 72,
	7, 49, 2, 2, 72, 73, 7, 44, 2, 2, 73, 77, 3, 2, 2, 2, 74, 76, 11, 2, 2,
	2, 75, 74, 3, 2, 2, 2, 76, 79, 3, 2, 2, 2, 77, 78, 3, 2, 2, 2, 77, 75,
	3, 2, 2, 2, 78, 80, 3, 2, 2, 2, 79, 77, 3, 2, 2, 2, 80, 81, 7, 44, 2, 2,
	81, 82, 7, 49, 2, 2, 82, 83, 3, 2, 2, 2, 83, 84, 8, 5, 2, 2, 84, 10, 3,
	2, 2, 2, 85, 86, 7, 47, 2, 2, 86, 87, 7, 47, 2, 2, 87, 90, 7, 34, 2, 2,
	88, 90, 7, 37, 2, 2, 89, 85, 3, 2, 2, 2, 89, 88, 3, 2, 2, 2, 90, 94, 3,
	2, 2, 2, 91, 93, 10, 5, 2, 2, 92, 91, 3, 2, 2, 2, 93, 96, 3, 2, 2, 2, 94,
	92, 3, 2, 2, 2, 94, 95, 3, 2, 2, 2, 95, 102, 3, 2, 2, 2, 96, 94, 3, 2,
	2, 2, 97, 99, 7, 15, 2, 2, 98, 97, 3, 2, 2, 2, 98, 99, 3, 2, 2, 2, 99,
	100, 3, 2, 2, 2, 100, 103, 7, 12, 2, 2, 101, 103, 7, 2, 2, 3, 102, 98,
	3, 2, 2, 2, 102, 101, 3, 2, 2, 2, 103, 104, 3, 2, 2, 2, 104, 105, 8, 6,
	2, 2, 105, 12, 3, 2, 2, 2, 106, 110, 7, 61, 2, 2, 107, 109, 9, 2, 2, 2,
	108, 107, 3, 2, 2, 2, 109, 112, 3, 2, 2, 2, 110, 108, 3, 2, 2, 2, 110,
	111, 3, 2, 2, 2, 111, 14, 3, 2, 2, 2, 112, 110, 3, 2, 2, 2, 113, 121, 7,
	36, 2, 2, 114, 115, 7, 94, 2, 2, 115, 120, 11, 2, 2, 2, 116, 117, 7, 36,
	2, 2, 117, 120, 7, 36, 2, 2, 118, 120, 10, 6, 2, 2, 119, 114, 3, 2, 2,
	2, 119, 116, 3, 2, 2, 2, 119, 118, 3, 2, 2, 2, 120, 123, 3, 2, 2, 2, 121,
	119, 3, 2, 2, 2, 121, 122, 3, 2, 2, 2, 122, 124, 3, 2, 2, 2, 123, 121,
	3, 2, 2, 2, 124, 125, 7, 36, 2, 2, 125, 16, 3, 2, 2, 2, 126, 134, 7, 41,
	2, 2, 127, 128, 7, 94, 2, 2, 128, 133, 11, 2, 2, 2, 129, 130, 7, 41, 2,
	2, 130, 133, 7, 41, 2, 2, 131, 133, 10, 7, 2, 2, 132, 127, 3, 2, 2, 2,
	132, 129, 3, 2, 2, 2, 132, 131, 3, 2, 2, 2, 133, 136, 3, 2, 2, 2, 134,
	132, 3, 2, 2, 2, 134, 135, 3, 2, 2, 2, 135, 137, 3, 2, 2, 2, 136, 134,
	3, 2, 2, 2, 137, 138, 7, 41, 2, 2, 138, 18, 3, 2, 2, 2, 139, 147, 7, 98,
	2, 2, 140, 141, 7, 94, 2, 2, 141, 146, 11, 2, 2, 2, 142, 143, 7, 98, 2,
	2, 143, 146, 7, 98, 2, 2, 144, 146, 10, 8, 2, 2, 145, 140, 3, 2, 2, 2,
	145, 142, 3, 2, 2, 2, 145, 144, 3, 2, 2, 2, 146, 149, 3, 2, 2, 2, 147,
	145, 3, 2, 2, 2, 147, 148, 3, 2, 2, 2, 148, 150, 3, 2, 2, 2, 149, 147,
	3, 2, 2, 2, 150, 151, 7, 98, 2, 2, 151, 20, 3, 2, 2, 2, 152, 153, 11, 2,
	2, 2, 153, 22, 3, 2, 2, 2, 23, 2, 26, 34, 39, 45, 49, 53, 61, 66, 77, 89,
	94, 98, 102, 110, 119, 121, 132, 134, 145, 147, 3, 2, 3, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames []string

var lexerSymbolicNames = []string{
	"", "SPACE", "COMMAND_COMMENT", "SPEC_MYSQL_COMMENT", "BLOCK_COMMENT",
	"LINE_COMMENT", "SEMI", "DQUOTA_STRING", "SQUOTA_STRING", "BQUOTA_STRING",
	"ANY",
}

var lexerRuleNames = []string{
	"SPACE", "COMMAND_COMMENT", "SPEC_MYSQL_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT",
	"SEMI", "DQUOTA_STRING", "SQUOTA_STRING", "BQUOTA_STRING", "ANY",
}

type MyStmt struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewMyStmt(input antlr.CharStream) *MyStmt {

	l := new(MyStmt)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "MyStmt.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// MyStmt tokens.
const (
	MyStmtSPACE              = 1
	MyStmtCOMMAND_COMMENT    = 2
	MyStmtSPEC_MYSQL_COMMENT = 3
	MyStmtBLOCK_COMMENT      = 4
	MyStmtLINE_COMMENT       = 5
	MyStmtSEMI               = 6
	MyStmtDQUOTA_STRING      = 7
	MyStmtSQUOTA_STRING      = 8
	MyStmtBQUOTA_STRING      = 9
	MyStmtANY                = 10
)
